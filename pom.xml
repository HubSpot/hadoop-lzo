<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="https://maven.apache.org/POM/4.0.0" xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.hubspot</groupId>
    <artifactId>basepom</artifactId>
    <version>25.7</version>
  </parent>

  <groupId>com.hadoop.gplcompression</groupId>
  <artifactId>hadoop-lzo</artifactId>
  <version>0.4.21-hubspot-SNAPSHOT</version>
  <packaging>jar</packaging>

  <properties>
    <hadoop.version>3.3.1</hadoop.version>
    <basepom.check.skip-pom-lint>true</basepom.check.skip-pom-lint>
    <basepom.check.skip-dependency-versions-check>true</basepom.check.skip-dependency-versions-check>
    <basepom.check.skip-checkstyle>true</basepom.check.skip-checkstyle>
    <basepom.check.skip-duplicate-finder>true</basepom.check.skip-duplicate-finder>
    <basepom.check.skip-findbugs>true</basepom.check.skip-findbugs>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-common</artifactId>
        <version>${hadoop.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-mapreduce-client-core</artifactId>
        <version>${hadoop.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-common</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-mapreduce-client-core</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <artifactId>commons-logging</artifactId>
      <groupId>commons-logging</groupId>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <licenses>
    <license>
      <name>The Apache Software License, Version 2.0</name>
      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
    </license>
  </licenses>

  <developers>
    <developer>
      <id>rangadi</id>
      <name>Raghu Angadi</name>
      <email>raghu@twitter.com</email>
    </developer>
    <developer>
      <id>traciscrawford</id>
      <name>Travis Crawford</name>
      <email>travis@twitter.com</email>
    </developer>
    <developer>
      <id>sjlee</id>
      <name>Sangjin Lee</name>
      <email>sjlee@twitter.com</email>
    </developer>
  </developers>

  <profiles>
    <profile>
      <id>build-native-linux</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>set-props-linux</id>
                <phase>initialize</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <exportAntProperties>true</exportAntProperties>
                  <target name="set-props" description="sets key properties that are used throughout">
                    <exec executable="sed" inputstring="${os.name}" outputproperty="nonspace.os">
                      <arg value="s/ /_/g"/>
                    </exec>
                    <property name="build.platform" value="${nonspace.os}-${os.arch}-${sun.arch.data.model}"/>
                    <property name="build.native" value="${project.build.directory}/native/${build.platform}"/>
                    <property name="build.native.target" value="${project.build.outputDirectory}/native/${build.platform}"/>
                    <property name="native.src.dir" value="${basedir}/src/main/native"/>
                    <property name="test.build.dir" value="${project.build.directory}/test-classes"/>
                    <property name="test.log.dir" value="${test.build.dir}/logs"/>
                  </target>
                </configuration>
              </execution>
              <execution>
                <id>build-native-linux</id>
                <phase>compile</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target name="build-native" unless="native.uptodate" description="compiles native code">
                    <property name="build.classes" refid="maven.compile.classpath"/>
                    <condition property="native.cflags" value="-mcpu=neoverse-n1 -march=armv8.2-a" else="">
                      <os arch="aarch64"/>
                    </condition>
                    <condition property="native.cflags" value="-m64" else="">
                      <os arch="amd64"/>
                    </condition>

                    <mkdir dir="${build.native}/lib"/>
                    <mkdir dir="${build.native.target}/lib"/>
                    <mkdir dir="${build.native}/src/com/hadoop/compression/lzo"/>
                    <mkdir dir="${build.native}/extraclasses"/>

                    <!-- Generate C headers for our Java classes. Also builds Java class files, we just ignore those. -->
                    <javac srcdir="${basedir}/src/main/java"
                           destdir="${build.native}/extraclasses"
                           classpath="${build.classes}"
                           nativeheaderdir="${build.native}/src/com/hadoop/compression/lzo"
                           verbose="yes">
                    </javac>

                    <exec dir="${build.native}" executable="sh" failonerror="true">
                      <env key="CFLAGS" value="${native.cflags}"/>
                      <arg line="${native.src.dir}/configure"/>
                    </exec>

                    <exec dir="${build.native}" executable="make" failonerror="true">
                      <env key="OS_ARCH" value="${os.arch}"/>
                    </exec>

                    <exec dir="${build.native}" executable="sh" failonerror="true">
                      <arg line="${build.native}/libtool --mode=install cp ${build.native}/libgplcompression.la ${build.native}/lib"/>
                    </exec>

                    <copy todir="${build.native.target}/lib">
                      <fileset dir="${build.native}/lib"/>
                    </copy>
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>build-native-mac</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>set-props-mac</id>
                <phase>initialize</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <exportAntProperties>true</exportAntProperties>
                  <target name="set-props" description="sets key properties that are used throughout">
                    <property name="build.platform" value="Mac_OS_X-${os.arch}-${sun.arch.data.model}"/>
                    <property name="build.native" value="${project.build.directory}/native/${build.platform}"/>
                    <property name="build.native.target" value="${project.build.outputDirectory}/native/${build.platform}"/>
                    <property name="native.src.dir" value="${basedir}/src/main/native"/>
                    <property name="test.build.dir" value="${project.build.directory}/test-classes"/>
                    <property name="test.log.dir" value="${test.build.dir}/logs"/>
                  </target>
                </configuration>
              </execution>
              <execution>
                <id>build-native-mac</id>
                <phase>compile</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target name="build-native" unless="native.uptodate" description="compiles native code">
                    <property name="build.classes" refid="maven.compile.classpath"/>
                    <condition property="native.cflags" value="-mcpu=neoverse-n1 -march=armv8.2-a">
                      <os arch="aarch64"/>
                    </condition>
                    <condition property="native.cflags" value="-m64">
                      <os arch="amd64"/>
                    </condition>
                    <condition property="native.host" value="aarch64-apple-darwin21.4">
                      <os arch="aarch64"/>
                    </condition>
                    <condition property="native.host" value="x86_64-apple-darwin21.4">
                      <os arch="amd64"/>
                    </condition>

                    <mkdir dir="${build.native}/lib"/>
                    <mkdir dir="${build.native.target}/lib"/>
                    <mkdir dir="${build.native}/src/com/hadoop/compression/lzo"/>
                    <mkdir dir="${build.native}/extraclasses"/>
                    <mkdir dir="${build.native}/lzo"/>

                    <!-- When cross-compiling, we do not have the luxury of linking against any libraries on the system, like liblzo2.
                         Build this dependency in Mac-format for ourselves. -->
                    <gunzip src="${basedir}/provided/lzo-2.10.tar.gz" dest="${build.native}/lzo"/>
                    <untar src="${build.native}/lzo/lzo-2.10.tar" dest="${build.native}/lzo"/>
                    <exec dir="${build.native}/lzo/lzo-2.10" executable="sh" failonerror="true">
                      <env key="CC" value="${native.host}-cc"/>
                      <env key="CFLAGS" value="${native.cflags} -I/usr/darwin/include"/>
                      <arg line="${build.native}/lzo/lzo-2.10/configure"/>
                      <arg line="--host=${native.host}"/>
                      <arg line="--enable-shared"/>
                    </exec>
                    <exec dir="${build.native}/lzo/lzo-2.10" executable="make" failonerror="true"/>

                    <!-- Generate C headers for our Java classes. Also builds Java class files, we just ignore those. -->
                    <javac srcdir="${basedir}/src/main/java"
                           destdir="${build.native}/extraclasses"
                           classpath="${build.classes}"
                           nativeheaderdir="${build.native}/src/com/hadoop/compression/lzo"
                           verbose="yes">
                    </javac>

                    <exec dir="${build.native}" executable="sh" failonerror="true">
                      <env key="CFLAGS" value="${native.cflags} -I${build.native}/lzo/lzo-2.10/include -I/usr/darwin/include"/>
                      <env key="CPPFLAGS" value="-I${build.native}/lzo/lzo-2.10/include -I/usr/darwin/include"/>
                      <!-- use the Linux-to-Mac crosscompiling compiler -->
                      <env key="CC" value="${native.host}-cc"/>
                      <!-- permit the configure script to discover the Mac-format LZO library we compiled earlier -->
                      <env key="LDFLAGS" value="-L${build.native}/lzo/lzo-2.10/src/.libs"/>
                      <arg line="${native.src.dir}/configure"/>
                      <arg line="--host=${native.host}"/>
                    </exec>

                    <exec dir="${build.native}" executable="make" failonerror="true">
                      <env key="OS_ARCH" value="${os.arch}"/>
                    </exec>

                    <exec dir="${build.native}" executable="sh" failonerror="true">
                      <arg line="${build.native}/libtool --mode=install cp ${build.native}/libgplcompression.la ${build.native}/lib"/>
                    </exec>

                    <copy todir="${build.native.target}/lib">
                      <fileset dir="${build.native}/lib"/>
                    </copy>

                    <copy todir="${build.new.native.target}/lib">
                      <fileset dir="${build.native}/lib"/>
                    </copy>
                    <!-- copy the contents of Mac_OS_X-amd64-64 to Mac_OS_X-x86_64-64 so users don't miss them -->
                    <property name="build.x86_64.platform" value="Mac_OS_X-x86_64-${sun.arch.data.model}"/>
                    <property name="build.x86_64.native.target" value="${project.build.outputDirectory}/native/${build.x86_64.platform}"/>
                    <property name="build.amd64.platform" value="Mac_OS_X-amd64-${sun.arch.data.model}"/>
                    <property name="build.amd64.native" value="${project.build.directory}/native/${build.amd64.platform}"/>
                    <copy todir="${build.x86_64.native.target}/lib" failonerror="false">
                      <fileset dir="${build.amd64.native}/lib"/>
                    </copy>
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>build-info</id>
            <phase>compile</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target name="build-info" description="generates hadoop-lzo-build.properties">
                <tstamp>
                  <format property="build_time" pattern="MM/dd/yyyy hh:mm aa" timezone="GMT"/>
                </tstamp>
                <exec executable="sh" outputproperty="build_revision">
                  <arg value="scripts/get_build_revision.sh" />
                </exec>
                <exec executable="whoami" outputproperty="build_author"/>
                <exec executable="uname" outputproperty="build_os">
                  <arg value="-a"/>
                </exec>
                <propertyfile file="${project.build.outputDirectory}/hadoop-lzo-build.properties"
                    comment="This file is automatically generated - DO NOT EDIT">
                  <entry key="build_time" value="${build_time}"/>
                  <entry key="build_revision" value="${build_revision}"/>
                  <entry key="build_author" value="${build_author}"/>
                  <entry key="build_version" value="${project.version}"/>
                  <entry key="build_os" value="${build_os}"/>
                </propertyfile>
              </target>
            </configuration>
          </execution>
          <execution>
            <id>check-native-uptodate</id>
            <phase>compile</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <exportAntProperties>true</exportAntProperties>
              <target name="check-native-uptodate" description="checks if native binaries should be rebuilt">
                <uptodate property="native.uptodate" targetfile="${build.native.target}/lib/libgplcompression.la">
                  <srcfiles dir="${native.src.dir}" includes="**/*"/>
                </uptodate>
              </target>
            </configuration>
          </execution>
          <execution>
            <id>prep-test</id>
            <phase>test-compile</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target name="prep-test" description="creates the test log directory">
                <delete dir="${test.log.dir}"/>
                <mkdir dir="${test.log.dir}"/>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <reuseForks>false</reuseForks>
          <argLine>-Djava.library.path=${build.native.target}/lib</argLine>
            <systemPropertyVariables>
              <test.build.data>${project.build.directory}/test-classes/data</test.build.data>
              <hadoop.log.dir>${test.log.dir}</hadoop.log.dir>
              <test.src.dir>${basedir}/src/test/java</test.src.dir>
              <hadoop.policy.file>hadoop-policy.xml</hadoop.policy.file>
            </systemPropertyVariables>
        </configuration>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
